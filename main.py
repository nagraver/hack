import os
import requests
import gradio as gr
import logging
from typing import Optional, List
from uuid import uuid4
import subprocess
import tempfile

from langchain_huggingface import HuggingFaceEmbeddings
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain_community.document_loaders import TextLoader
from langchain_text_splitters import SentenceTransformersTokenTextSplitter
from langchain_core.language_models.llms import LLM
from langchain_core.documents import Document
from langchain_qdrant import QdrantVectorStore
from qdrant_client import QdrantClient
from qdrant_client.http.models import Distance, VectorParams

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
COLLECTION_NAME = os.getenv("COLLECTION_NAME", "code-assistant-store")

class LMStudioLLM(LLM):
    model: str = "local-model"
    base_url: str = "http://127.0.0.1:1234/v1"

    def _call(self, prompt: str, stop: Optional[List[str]] = None) -> str:
        payload = {
            "model": self.model,
            "messages": [{"role": "user", "content": prompt}],
            "temperature": 0.7,
        }
        response = requests.post(f"{self.base_url}/chat/completions", json=payload)
        return response.json()["choices"][0]["message"]["content"]

    @property
    def _llm_type(self) -> str:
        return "lmstudio-llm"

def configure_qdrant() -> QdrantVectorStore:
    """Configure and return a Qdrant vector store."""
    logger.info("Configuring Qdrant client and vector store...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–∏–Ω–≥–æ–≤
    embeddings = HuggingFaceEmbeddings(
        model_name="BAAI/bge-m3",
        encode_kwargs={'truncation': True, 'max_length': 512}
    )
    embeddings.embed_query("test")  # –ü—Ä–æ–≥—Ä–µ–≤ –º–æ–¥–µ–ª–∏

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Qdrant
    client = QdrantClient(path='/tmp/langchain_qdrant')

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        client.create_collection(
            collection_name=COLLECTION_NAME,
            vectors_config=VectorParams(size=1024, distance=Distance.COSINE),
        )
    except ValueError:
        logger.info("Collection already exists. Skipping creation.")

    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    vector_store = QdrantVectorStore(
        client=client,
        collection_name=COLLECTION_NAME,
        embedding=embeddings,
    )
    
    logger.info("Qdrant configuration completed.")
    return vector_store

def clone_github_repo(repo_url: str, temp_dir: str) -> str:
    """Clone GitHub repository to temporary directory."""
    try:
        repo_name = repo_url.split("/")[-1]
        if repo_name.endswith(".git"):
            repo_name = repo_name[:-4]
        repo_path = os.path.join(temp_dir, repo_name)
        
        subprocess.run(["git", "clone", repo_url, repo_path], check=True)
        logger.info(f"Repository cloned successfully to {repo_path}")
        return repo_path
    except subprocess.CalledProcessError as e:
        logger.error(f"Failed to clone repository: {e}")
        raise

def load_documents_from_repo(repo_path: str) -> List[Document]:
    """Load documents from repository."""
    documents = []
    
    for root, _, files in os.walk(repo_path):
        for file in files:
            if file.endswith(('.txt', '.md', '.py', '.js', '.java', '.cpp', '.h', '.html', '.css')):
                file_path = os.path.join(root, file)
                try:
                    loader = TextLoader(file_path, encoding='utf-8')
                    documents.extend(loader.load())
                    logger.info(f"Loaded {file_path}")
                except Exception as e:
                    logger.warning(f"Could not load {file_path}: {e}")
    
    return documents

def add_repository_to_store(vector_store: QdrantVectorStore, repo_url: str) -> None:
    """Add repository documents to vector store."""
    with tempfile.TemporaryDirectory() as temp_dir:
        try:
            # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
            repo_path = clone_github_repo(repo_url, temp_dir)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            documents = load_documents_from_repo(repo_path)
            
            if not documents:
                raise ValueError("No documents found in repository")
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —á–∞–Ω–∫–∏
            splitter = SentenceTransformersTokenTextSplitter(
                tokens_per_chunk=512,
                chunk_overlap=50,
                model_name="BAAI/bge-m3"
            )
            texts = splitter.split_documents(documents)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            ids = [str(uuid4()) for _ in texts]
            vector_store.add_documents(documents=texts, ids=ids)
            logger.info(f"Added {len(texts)} documents from repository to vector store")
            
        except Exception as e:
            logger.error(f"Error processing repository: {e}")
            raise

def load_or_create_vector_store(vector_store: QdrantVectorStore, file_path: str = None) -> QdrantVectorStore:
    """Load or create vector store with documents."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    client = vector_store.client
    collection_info = client.get_collection(COLLECTION_NAME)
    
    if collection_info.vectors_count == 0 and file_path:
        logger.info("No documents in vector store. Creating new index...")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        loader = TextLoader(file_path)
        documents = loader.load()
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —á–∞–Ω–∫–∏
        splitter = SentenceTransformersTokenTextSplitter(
            tokens_per_chunk=512,
            chunk_overlap=50,
            model_name="BAAI/bge-m3"
        )
        texts = splitter.split_documents(documents)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        ids = [str(uuid4()) for _ in texts]
        vector_store.add_documents(documents=texts, ids=ids)
        logger.info(f"Added {len(texts)} documents to vector store.")
    else:
        logger.info(f"Vector store already contains {collection_info.vectors_count} vectors. Using existing index.")
    
    return vector_store

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ===
llm = LMStudioLLM()
vector_store = configure_qdrant()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
FILE_PATH = r"./my_notes.txt"
if os.path.exists(FILE_PATH):
    vector_store = load_or_create_vector_store(vector_store, FILE_PATH)
else:
    vector_store = load_or_create_vector_store(vector_store)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞
retriever = vector_store.as_retriever(
    search_type="mmr",
    search_kwargs={"k": 5}
)

# === –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ===
prompt_template = PromptTemplate(
    input_variables=["context", "question"],
    template=(
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–µ–∫—Ç–∞\n\n"
        "–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç:"
    ),
)

# === –°–±–æ—Ä–∫–∞ —Ü–µ–ø–æ—á–∫–∏ ===
qa_chain = RetrievalQA.from_chain_type(
    llm=llm,
    retriever=retriever,
    chain_type="stuff",
    chain_type_kwargs={"prompt": prompt_template},
    return_source_documents=False,
)

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Gradio ===
def answer_question(question):
    response = qa_chain({"query": question})
    return response["result"]

def add_repository(repo_url):
    try:
        add_repository_to_store(vector_store, repo_url)
        return "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {str(e)}"

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio ===
with gr.Blocks() as demo:
    gr.Markdown("## üß† –õ–æ–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫–æ–¥—É")
    gr.Markdown("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLaMA 3.1 —á–µ—Ä–µ–∑ LM Studio + LangChain + Qdrant + bge-m3")
    
    with gr.Tab("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"):
        question_input = gr.Textbox(lines=2, placeholder="–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–µ–∫—Ç—É...", label="–í–æ–ø—Ä–æ—Å")
        answer_output = gr.Textbox(label="–û—Ç–≤–µ—Ç")
        ask_button = gr.Button("–°–ø—Ä–æ—Å–∏—Ç—å")
    
    with gr.Tab("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"):
        repo_url_input = gr.Textbox(
            placeholder="https://github.com/username/repository.git",
            label="URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
        )
        add_repo_button = gr.Button("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        repo_status_output = gr.Textbox(label="–°—Ç–∞—Ç—É—Å")
    
    ask_button.click(answer_question, inputs=question_input, outputs=answer_output)
    add_repo_button.click(add_repository, inputs=repo_url_input, outputs=repo_status_output)

# === –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===
if __name__ == "__main__":
    demo.launch(server_name="0.0.0.0", server_port=7860)